/*! tailwindcss v4.1.16 | MIT License | https://tailwindcss.com */
@layer properties;
@layer theme, base, components, utilities;
@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
      "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-serif: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono",
      "Courier New", monospace;
    --color-blue-400: oklch(70.7% 0.165 254.624);
    --color-blue-500: oklch(62.3% 0.214 259.815);
    --color-purple-500: oklch(62.7% 0.265 303.9);
    --color-gray-50: oklch(98.5% 0.002 247.839);
    --color-gray-400: oklch(70.7% 0.022 261.325);
    --color-gray-500: oklch(55.1% 0.027 264.364);
    --color-gray-600: oklch(44.6% 0.03 256.802);
    --color-black: #000;
    --spacing: 0.25rem;
    --container-md: 28rem;
    --container-2xl: 42rem;
    --container-3xl: 48rem;
    --container-4xl: 56rem;
    --container-6xl: 72rem;
    --container-7xl: 80rem;
    --text-xs: 0.75rem;
    --text-xs--line-height: calc(1 / 0.75);
    --text-sm: 0.875rem;
    --text-sm--line-height: calc(1.25 / 0.875);
    --text-lg: 1.125rem;
    --text-lg--line-height: calc(1.75 / 1.125);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-2xl: 1.5rem;
    --text-2xl--line-height: calc(2 / 1.5);
    --text-3xl: 1.875rem;
    --text-3xl--line-height: calc(2.25 / 1.875);
    --text-4xl: 2.25rem;
    --text-4xl--line-height: calc(2.5 / 2.25);
    --text-5xl: 3rem;
    --text-5xl--line-height: 1;
    --text-6xl: 3.75rem;
    --text-6xl--line-height: 1;
    --text-7xl: 4.5rem;
    --text-7xl--line-height: 1;
    --text-8xl: 6rem;
    --text-8xl--line-height: 1;
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --font-weight-extrabold: 800;
    --font-weight-black: 900;
    --tracking-normal: 0em;
    --tracking-wide: 0.025em;
    --leading-normal: 1.5;
    --leading-relaxed: 1.625;
    --radius-lg: 0.5rem;
    --radius-2xl: 1rem;
    --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
    --animate-pulse: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    --animate-bounce: bounce 1s infinite;
    --blur-xl: 24px;
    --blur-3xl: 64px;
    --default-transition-duration: 150ms;
    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}
@layer base {
  *, ::after, ::before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: 0 solid;
  }
  html, :host {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b, strong {
    font-weight: bolder;
  }
  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol, ul, menu {
    list-style: none;
  }
  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
    vertical-align: middle;
  }
  img, video {
    max-width: 100%;
    height: auto;
  }
  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    border-radius: 0;
    background-color: transparent;
    opacity: 1;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentcolor;
    }
    @supports (color: color-mix(in lab, red, red)) {
      ::placeholder {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  ::-webkit-calendar-picker-indicator {
    line-height: 1;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button, input:where([type="button"], [type="reset"], [type="submit"]), ::file-selector-button {
    appearance: button;
  }
  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }
}
@layer utilities {
  @layer daisyui.component {
    .menu {
      display: flex;
      width: fit-content;
      flex-direction: column;
      flex-wrap: wrap;
      padding: calc(0.25rem * 2);
      --menu-active-fg: var(--color-neutral-content);
      --menu-active-bg: var(--color-neutral);
      font-size: 0.875rem;
    }
    .menu :where(li ul) {
      position: relative;
      margin-inline-start: calc(0.25rem * 4);
      padding-inline-start: calc(0.25rem * 2);
      white-space: nowrap;
    }
    .menu :where(li ul):before {
      position: absolute;
      inset-inline-start: calc(0.25rem * 0);
      top: calc(0.25rem * 3);
      bottom: calc(0.25rem * 3);
      background-color: var(--color-base-content);
      opacity: 10%;
      width: var(--border);
      content: "";
    }
    .menu :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
      display: none;
    }
    .menu :where(li:not(.menu-title) > *:not(ul, details, .menu-title, .btn)), .menu :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
      display: grid;
      grid-auto-flow: column;
      align-content: flex-start;
      align-items: center;
      gap: calc(0.25rem * 2);
      border-radius: var(--radius-field);
      padding-inline: calc(0.25rem * 3);
      padding-block: calc(0.25rem * 1.5);
      text-align: start;
      transition-property: color, background-color, box-shadow;
      transition-duration: 0.2s;
      transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
      grid-auto-columns: minmax(auto, max-content) auto max-content;
      text-wrap: balance;
      user-select: none;
    }
    .menu :where(li > details > summary) {
      --tw-outline-style: none;
      outline-style: none;
    }
    @media (forced-colors: active) {
      .menu :where(li > details > summary) {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
    .menu :where(li > details > summary)::-webkit-details-marker {
      display: none;
    }
    .menu :where(li > details > summary):after, .menu :where(li > .menu-dropdown-toggle):after {
      justify-self: flex-end;
      display: block;
      height: 0.375rem;
      width: 0.375rem;
      rotate: -135deg;
      translate: 0 -1px;
      transition-property: rotate, translate;
      transition-duration: 0.2s;
      content: "";
      transform-origin: 50% 50%;
      box-shadow: 2px 2px inset;
      pointer-events: none;
    }
    .menu :where(li > details[open] > summary):after, .menu :where(li > .menu-dropdown-toggle.menu-dropdown-show):after {
      rotate: 45deg;
      translate: 0 1px;
    }
    .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn).menu-focus, .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn):focus-visible {
      cursor: pointer;
      background-color: var(--color-base-content);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn).menu-focus, .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn):focus-visible {
        background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
    }
    .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn).menu-focus, .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn):focus-visible {
      color: var(--color-base-content);
      --tw-outline-style: none;
      outline-style: none;
    }
    @media (forced-colors: active) {
      .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn).menu-focus, .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn):focus-visible {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
    .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
      cursor: pointer;
      background-color: var(--color-base-content);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
        background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
    }
    .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
      --tw-outline-style: none;
      outline-style: none;
    }
    @media (forced-colors: active) {
      .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
    .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
      box-shadow: 0 1px oklch(0% 0 0 / 0.01) inset, 0 -1px oklch(100% 0 0 / 0.01) inset;
    }
    .menu :where(li:empty) {
      background-color: var(--color-base-content);
      opacity: 10%;
      margin: 0.5rem 1rem;
      height: 1px;
    }
    .menu :where(li) {
      position: relative;
      display: flex;
      flex-shrink: 0;
      flex-direction: column;
      flex-wrap: wrap;
      align-items: stretch;
    }
    .menu :where(li) .badge {
      justify-self: flex-end;
    }
    .menu :where(li) > *:not(ul, .menu-title, details, .btn):active, .menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active, .menu :where(li) > details > summary:active {
      --tw-outline-style: none;
      outline-style: none;
    }
    @media (forced-colors: active) {
      .menu :where(li) > *:not(ul, .menu-title, details, .btn):active, .menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active, .menu :where(li) > details > summary:active {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
    .menu :where(li) > *:not(ul, .menu-title, details, .btn):active, .menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active, .menu :where(li) > details > summary:active {
      color: var(--menu-active-fg);
      background-color: var(--menu-active-bg);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
    }
    .menu :where(li) > *:not(ul, .menu-title, details, .btn):active:not(.menu :where(li) > *:not(ul, .menu-title, details, .btn):active:active), .menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active:not(.menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active:active), .menu :where(li) > details > summary:active:not(.menu :where(li) > details > summary:active:active) {
      box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--menu-active-bg);
    }
    .menu :where(li).menu-disabled {
      pointer-events: none;
      color: var(--color-base-content);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .menu :where(li).menu-disabled {
        color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
      }
    }
    .menu .dropdown:focus-within .menu-dropdown-toggle:after {
      rotate: 45deg;
      translate: 0 1px;
    }
    .menu .dropdown-content {
      margin-top: calc(0.25rem * 2);
      padding: calc(0.25rem * 2);
    }
    .menu .dropdown-content:before {
      display: none;
    }
  }
  @layer daisyui.component {
    .dropdown {
      position: relative;
      display: inline-block;
      position-area: var(--anchor-v, bottom) var(--anchor-h, span-right);
    }
    .dropdown > *:not(summary):focus {
      --tw-outline-style: none;
      outline-style: none;
    }
    @media (forced-colors: active) {
      .dropdown > *:not(summary):focus {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
    .dropdown .dropdown-content {
      position: absolute;
    }
    .dropdown:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within) .dropdown-content, .dropdown.dropdown-hover:not(:hover) [tabindex]:first-child:focus:not(:focus-visible) ~ .dropdown-content {
      display: none;
      transform-origin: top;
      opacity: 0%;
      scale: 95%;
    }
    .dropdown[popover], .dropdown .dropdown-content {
      z-index: 999;
    }
    @media (prefers-reduced-motion: no-preference) {
      .dropdown[popover], .dropdown .dropdown-content {
        animation: dropdown 0.2s;
        transition-property: opacity, scale, display;
        transition-behavior: allow-discrete;
        transition-duration: 0.2s;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
      }
    }
    @starting-style {
      .dropdown[popover], .dropdown .dropdown-content {
        scale: 95%;
        opacity: 0;
      }
    }
    .dropdown.dropdown-open > [tabindex]:first-child, .dropdown:not(.dropdown-hover):focus > [tabindex]:first-child, .dropdown:focus-within > [tabindex]:first-child {
      pointer-events: none;
    }
    .dropdown.dropdown-open .dropdown-content, .dropdown:not(.dropdown-hover):focus .dropdown-content, .dropdown:focus-within .dropdown-content {
      opacity: 100%;
    }
    .dropdown.dropdown-hover:hover .dropdown-content {
      opacity: 100%;
      scale: 100%;
    }
    .dropdown:is(details) summary::-webkit-details-marker {
      display: none;
    }
    .dropdown.dropdown-open .dropdown-content, .dropdown:focus .dropdown-content, .dropdown:focus-within .dropdown-content {
      scale: 100%;
    }
    .dropdown:where([popover]) {
      background: #0000;
    }
    .dropdown[popover] {
      position: fixed;
      color: inherit;
    }
    @supports not (position-area: bottom) {
      .dropdown[popover] {
        margin: auto;
      }
      .dropdown[popover].dropdown-open:not(:popover-open) {
        display: none;
        transform-origin: top;
        opacity: 0%;
        scale: 95%;
      }
      .dropdown[popover]::backdrop {
        background-color: color-mix(in oklab, #000 30%, #0000);
      }
    }
    .dropdown[popover]:not(.dropdown-open, :popover-open) {
      display: none;
      transform-origin: top;
      opacity: 0%;
      scale: 95%;
    }
  }
  @layer daisyui.component {
    :where(.btn) {
      width: unset;
    }
  }
  .prose .btn {
    text-decoration-line: none;
  }
  @layer daisyui.component {
    .btn {
      display: inline-flex;
      flex-shrink: 0;
      cursor: pointer;
      flex-wrap: nowrap;
      align-items: center;
      justify-content: center;
      gap: calc(0.25rem * 1.5);
      text-align: center;
      vertical-align: middle;
      outline-offset: 2px;
      webkit-user-select: none;
      user-select: none;
      padding-inline: var(--btn-p);
      color: var(--btn-fg);
      --tw-prose-links: var(--btn-fg);
      height: var(--size);
      font-size: var(--fontsize, 0.875rem);
      font-weight: 600;
      outline-color: var(--btn-color, var(--color-base-content));
      transition-property: color, background-color, border-color, box-shadow;
      transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
      transition-duration: 0.2s;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      background-color: var(--btn-bg);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--btn-noise);
      border-width: var(--border);
      border-style: solid;
      border-color: var(--btn-border);
      text-shadow: 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15));
      touch-action: manipulation;
      box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--btn-shadow);
      --size: calc(var(--size-field, 0.25rem) * 10);
      --btn-bg: var(--btn-color, var(--color-base-200));
      --btn-fg: var(--color-base-content);
      --btn-p: 1rem;
      --btn-border: var(--btn-bg);
      --btn-shadow: 0 3px 2px -2px var(--btn-bg),
      0 4px 3px -2px var(--btn-bg);
      --btn-noise: var(--fx-noise);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn {
        --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
      }
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn {
        --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000),
      0 4px 3px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000);
      }
    }
    @media (hover: hover) {
      .btn:hover {
        --btn-bg: var(--btn-color, var(--color-base-200));
      }
      @supports (color: color-mix(in lab, red, red)) {
        .btn:hover {
          --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
        }
      }
    }
    .btn:focus-visible, .btn:has(:focus-visible) {
      outline-width: 2px;
      outline-style: solid;
      isolation: isolate;
    }
    .btn:active:not(.btn-active) {
      translate: 0 0.5px;
      --btn-bg: var(--btn-color, var(--color-base-200));
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn:active:not(.btn-active) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 5%);
      }
    }
    .btn:active:not(.btn-active) {
      --btn-border: var(--btn-color, var(--color-base-200));
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn:active:not(.btn-active) {
        --btn-border: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
      }
    }
    .btn:active:not(.btn-active) {
      --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
    }
    .btn:is(input[type="checkbox"], input[type="radio"]) {
      appearance: none;
    }
    .btn:is(input[type="checkbox"], input[type="radio"])::after {
      --tw-content: attr(aria-label);
      content: var(--tw-content);
    }
    .btn:where(input:checked:not(.filter .btn)) {
      --btn-color: var(--color-primary);
      --btn-fg: var(--color-primary-content);
      isolation: isolate;
    }
  }
  @layer daisyui.modifier {
    .btn:disabled {
      pointer-events: none;
      --btn-border: #0000;
      --btn-noise: none;
      --btn-fg: var(--color-base-content);
    }
    .btn:disabled:not(.btn-link, .btn-ghost) {
      background-color: var(--color-base-content);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn:disabled:not(.btn-link, .btn-ghost) {
        background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
    }
    .btn:disabled:not(.btn-link, .btn-ghost) {
      box-shadow: none;
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn:disabled {
        --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
      }
    }
    @media (hover: hover) {
      .btn:disabled:hover {
        pointer-events: none;
        background-color: var(--color-neutral);
      }
      @supports (color: color-mix(in lab, red, red)) {
        .btn:disabled:hover {
          background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
        }
      }
      .btn:disabled:hover {
        --btn-border: #0000;
        --btn-fg: var(--color-base-content);
      }
      @supports (color: color-mix(in lab, red, red)) {
        .btn:disabled:hover {
          --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
        }
      }
    }
  }
  @layer daisyui.modifier {
    .btn[disabled] {
      pointer-events: none;
      --btn-border: #0000;
      --btn-noise: none;
      --btn-fg: var(--color-base-content);
    }
    .btn[disabled]:not(.btn-link, .btn-ghost) {
      background-color: var(--color-base-content);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn[disabled]:not(.btn-link, .btn-ghost) {
        background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
    }
    .btn[disabled]:not(.btn-link, .btn-ghost) {
      box-shadow: none;
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn[disabled] {
        --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
      }
    }
    @media (hover: hover) {
      .btn[disabled]:hover {
        pointer-events: none;
        background-color: var(--color-neutral);
      }
      @supports (color: color-mix(in lab, red, red)) {
        .btn[disabled]:hover {
          background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
        }
      }
      .btn[disabled]:hover {
        --btn-border: #0000;
        --btn-fg: var(--color-base-content);
      }
      @supports (color: color-mix(in lab, red, red)) {
        .btn[disabled]:hover {
          --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
        }
      }
    }
  }
  @layer daisyui.component {
    .list {
      display: flex;
      flex-direction: column;
      font-size: 0.875rem;
    }
    .list .list-row {
      --list-grid-cols: minmax(0, auto) 1fr;
      position: relative;
      display: grid;
      grid-auto-flow: column;
      gap: calc(0.25rem * 4);
      border-radius: var(--radius-box);
      padding: calc(0.25rem * 4);
      word-break: break-word;
      grid-template-columns: var(--list-grid-cols);
    }
    .list > :not(:last-child).list-row:after, .list > :not(:last-child) .list-row:after {
      content: "";
      border-bottom: var(--border) solid;
      inset-inline: var(--radius-box);
      position: absolute;
      bottom: calc(0.25rem * 0);
      border-color: var(--color-base-content);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .list > :not(:last-child).list-row:after, .list > :not(:last-child) .list-row:after {
        border-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
      }
    }
  }
  @layer daisyui.modifier {
    .list .list-row:has(.list-col-grow:nth-child(1)) {
      --list-grid-cols: 1fr;
    }
    .list .list-row:has(.list-col-grow:nth-child(2)) {
      --list-grid-cols: minmax(0, auto) 1fr;
    }
    .list .list-row:has(.list-col-grow:nth-child(3)) {
      --list-grid-cols: minmax(0, auto) minmax(0, auto) 1fr;
    }
    .list .list-row:has(.list-col-grow:nth-child(4)) {
      --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
    }
    .list .list-row:has(.list-col-grow:nth-child(5)) {
      --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
    }
    .list .list-row:has(.list-col-grow:nth-child(6)) {
      --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto)
          minmax(0, auto) 1fr;
    }
    .list .list-row :not(.list-col-wrap) {
      grid-row-start: 1;
    }
  }
  @layer daisyui.component {
    .toast {
      position: fixed;
      inset-inline-start: auto;
      inset-inline-end: calc(0.25rem * 4);
      top: auto;
      bottom: calc(0.25rem * 4);
      display: flex;
      flex-direction: column;
      gap: calc(0.25rem * 2);
      background-color: transparent;
      translate: var(--toast-x, 0) var(--toast-y, 0);
      width: max-content;
      max-width: calc(100vw - 2rem);
    }
    @media (prefers-reduced-motion: no-preference) {
      .toast > * {
        animation: toast 0.25s ease-out;
      }
    }
  }
  @layer daisyui.component {
    .input {
      cursor: text;
      border: var(--border) solid #0000;
      position: relative;
      display: inline-flex;
      flex-shrink: 1;
      appearance: none;
      align-items: center;
      gap: calc(0.25rem * 2);
      background-color: var(--color-base-100);
      padding-inline: calc(0.25rem * 3);
      vertical-align: middle;
      white-space: nowrap;
      width: clamp(3rem, 20rem, 100%);
      height: var(--size);
      font-size: max(var(--font-size, 0.875rem), 0.875rem);
      touch-action: manipulation;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      border-color: var(--input-color);
      box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      --size: calc(var(--size-field, 0.25rem) * 10);
      --input-color: var(--color-base-content);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .input {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      }
    }
    @supports (color: color-mix(in lab, red, red)) {
      .input {
        --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
    }
    .input:where(input) {
      display: inline-flex;
    }
    .input :where(input) {
      display: inline-flex;
      height: 100%;
      width: 100%;
      appearance: none;
      background-color: transparent;
      border: none;
    }
    .input :where(input):focus, .input :where(input):focus-within {
      --tw-outline-style: none;
      outline-style: none;
    }
    @media (forced-colors: active) {
      .input :where(input):focus, .input :where(input):focus-within {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
    .input :where(input[type="url"]), .input :where(input[type="email"]) {
      direction: ltr;
    }
    .input :where(input[type="date"]) {
      display: inline-flex;
    }
    .input:focus, .input:focus-within {
      --input-color: var(--color-base-content);
      box-shadow: 0 1px var(--input-color);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .input:focus, .input:focus-within {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
      }
    }
    .input:focus, .input:focus-within {
      outline: 2px solid var(--input-color);
      outline-offset: 2px;
      isolation: isolate;
      z-index: 1;
    }
    @media (pointer: coarse) {
      @supports (-webkit-touch-callout: none) {
        .input:focus, .input:focus-within {
          --font-size: 1rem;
        }
      }
    }
    .input:has(> input[disabled]), .input:is(:disabled, [disabled]), fieldset:disabled .input {
      cursor: not-allowed;
      border-color: var(--color-base-200);
      background-color: var(--color-base-200);
      color: var(--color-base-content);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .input:has(> input[disabled]), .input:is(:disabled, [disabled]), fieldset:disabled .input {
        color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
      }
    }
    .input:has(> input[disabled])::placeholder, .input:is(:disabled, [disabled])::placeholder, fieldset:disabled .input::placeholder {
      color: var(--color-base-content);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .input:has(> input[disabled])::placeholder, .input:is(:disabled, [disabled])::placeholder, fieldset:disabled .input::placeholder {
        color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
      }
    }
    .input:has(> input[disabled]), .input:is(:disabled, [disabled]), fieldset:disabled .input {
      box-shadow: none;
    }
    .input:has(> input[disabled]) > input[disabled] {
      cursor: not-allowed;
    }
    .input::-webkit-date-and-time-value {
      text-align: inherit;
    }
    .input[type="number"]::-webkit-inner-spin-button {
      margin-block: calc(0.25rem * -3);
      margin-inline-end: calc(0.25rem * -3);
    }
    .input::-webkit-calendar-picker-indicator {
      position: absolute;
      inset-inline-end: 0.75em;
    }
    .input:has(> input[type="date"]) :where(input[type="date"]) {
      display: inline-flex;
      webkit-appearance: none;
      appearance: none;
    }
    .input:has(> input[type="date"]) input[type="date"]::-webkit-calendar-picker-indicator {
      position: absolute;
      inset-inline-end: 0.75em;
      width: 1em;
      height: 1em;
      cursor: pointer;
    }
  }
  @layer daisyui.component {
    .steps {
      display: inline-grid;
      grid-auto-flow: column;
      overflow: hidden;
      overflow-x: auto;
      counter-reset: step;
      grid-auto-columns: 1fr;
    }
    .steps .step {
      display: grid;
      grid-template-columns: repeat(1, minmax(0, 1fr));
      grid-template-columns: auto;
      grid-template-rows: repeat(2, minmax(0, 1fr));
      grid-template-rows: 40px 1fr;
      place-items: center;
      text-align: center;
      min-width: 4rem;
      --step-bg: var(--color-base-300);
      --step-fg: var(--color-base-content);
    }
    .steps .step:before {
      top: calc(0.25rem * 0);
      grid-column-start: 1;
      grid-row-start: 1;
      height: calc(0.25rem * 2);
      width: 100%;
      border: 1px solid;
      color: var(--step-bg);
      background-color: var(--step-bg);
      content: "";
      margin-inline-start: -100%;
    }
    .steps .step > .step-icon, .steps .step:not(:has(.step-icon)):after {
      --tw-content: counter(step);
      content: var(--tw-content);
      counter-increment: step;
      z-index: 1;
      color: var(--step-fg);
      background-color: var(--step-bg);
      border: 1px solid var(--step-bg);
      position: relative;
      grid-column-start: 1;
      grid-row-start: 1;
      display: grid;
      height: calc(0.25rem * 8);
      width: calc(0.25rem * 8);
      place-items: center;
      place-self: center;
      border-radius: calc(infinity * 1px);
    }
    .steps .step:first-child:before {
      --tw-content: none;
      content: var(--tw-content);
    }
    .steps .step[data-content]:after {
      --tw-content: attr(data-content);
      content: var(--tw-content);
    }
  }
  @layer daisyui.modifier {
    .steps .step-neutral + .step-neutral:before, .steps .step-neutral:after, .steps .step-neutral > .step-icon {
      --step-bg: var(--color-neutral);
      --step-fg: var(--color-neutral-content);
    }
    .steps .step-primary + .step-primary:before, .steps .step-primary:after, .steps .step-primary > .step-icon {
      --step-bg: var(--color-primary);
      --step-fg: var(--color-primary-content);
    }
    .steps .step-secondary + .step-secondary:before, .steps .step-secondary:after, .steps .step-secondary > .step-icon {
      --step-bg: var(--color-secondary);
      --step-fg: var(--color-secondary-content);
    }
    .steps .step-accent + .step-accent:before, .steps .step-accent:after, .steps .step-accent > .step-icon {
      --step-bg: var(--color-accent);
      --step-fg: var(--color-accent-content);
    }
    .steps .step-info + .step-info:before, .steps .step-info:after, .steps .step-info > .step-icon {
      --step-bg: var(--color-info);
      --step-fg: var(--color-info-content);
    }
    .steps .step-success + .step-success:before, .steps .step-success:after, .steps .step-success > .step-icon {
      --step-bg: var(--color-success);
      --step-fg: var(--color-success-content);
    }
    .steps .step-warning + .step-warning:before, .steps .step-warning:after, .steps .step-warning > .step-icon {
      --step-bg: var(--color-warning);
      --step-fg: var(--color-warning-content);
    }
    .steps .step-error + .step-error:before, .steps .step-error:after, .steps .step-error > .step-icon {
      --step-bg: var(--color-error);
      --step-fg: var(--color-error-content);
    }
  }
  @layer daisyui.component {
    .swap {
      position: relative;
      display: inline-grid;
      cursor: pointer;
      place-content: center;
      vertical-align: middle;
      webkit-user-select: none;
      user-select: none;
    }
    .swap input {
      appearance: none;
      border: none;
    }
    .swap > * {
      grid-column-start: 1;
      grid-row-start: 1;
    }
    @media (prefers-reduced-motion: no-preference) {
      .swap > * {
        transition-property: transform, rotate, opacity;
        transition-duration: 0.2s;
        transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
      }
    }
    .swap .swap-on, .swap .swap-indeterminate, .swap input:indeterminate ~ .swap-on {
      opacity: 0%;
    }
    .swap input:is(:checked, :indeterminate) ~ .swap-off {
      opacity: 0%;
    }
    .swap input:checked ~ .swap-on, .swap input:indeterminate ~ .swap-indeterminate {
      opacity: 100%;
      backface-visibility: visible;
    }
  }
  @layer daisyui.component {
    .avatar {
      position: relative;
      display: inline-flex;
      vertical-align: middle;
    }
    .avatar > div {
      display: block;
      aspect-ratio: 1 / 1;
      overflow: hidden;
    }
    .avatar img {
      height: 100%;
      width: 100%;
      object-fit: cover;
    }
  }
  @layer daisyui.component {
    .checkbox {
      border: var(--border) solid var(--input-color, var(--color-base-content));
      position: relative;
      display: inline-block;
      flex-shrink: 0;
      cursor: pointer;
      appearance: none;
      border-radius: var(--radius-selector);
      padding: calc(0.25rem * 1);
      vertical-align: middle;
      color: var(--color-base-content);
      box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
      transition: background-color 0.2s, box-shadow 0.2s;
      --size: calc(var(--size-selector, 0.25rem) * 6);
      width: var(--size);
      height: var(--size);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .checkbox {
        border: var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
      }
    }
    .checkbox:before {
      --tw-content: "";
      content: var(--tw-content);
      display: block;
      width: 100%;
      height: 100%;
      rotate: 45deg;
      background-color: currentcolor;
      opacity: 0%;
      transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
      transition-delay: 0.1s;
      clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
      box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      font-size: 1rem;
      line-height: 0.75;
    }
    .checkbox:focus-visible {
      outline: 2px solid var(--input-color, currentColor);
      outline-offset: 2px;
    }
    .checkbox:checked, .checkbox[aria-checked="true"] {
      background-color: var(--input-color, #0000);
      box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
    }
    .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
      clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
      opacity: 100%;
    }
    @media (forced-colors: active) {
      .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
        rotate: 0deg;
        background-color: transparent;
        --tw-content: "✔︎";
        clip-path: none;
      }
    }
    @media print {
      .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
        rotate: 0deg;
        background-color: transparent;
        --tw-content: "✔︎";
        clip-path: none;
      }
    }
    .checkbox:indeterminate {
      background-color: var( --input-color, var(--color-base-content) );
    }
    @supports (color: color-mix(in lab, red, red)) {
      .checkbox:indeterminate {
        background-color: var( --input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000) );
      }
    }
    .checkbox:indeterminate:before {
      rotate: 0deg;
      opacity: 100%;
      translate: 0 -35%;
      clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
    }
  }
  @layer daisyui.modifier {
    .checkbox:disabled {
      cursor: not-allowed;
      opacity: 20%;
    }
  }
  @layer daisyui.component {
    .navbar {
      display: flex;
      width: 100%;
      align-items: center;
      padding: 0.5rem;
      min-height: 4rem;
    }
  }
  @layer daisyui.modifier {
    :where(.navbar) {
      position: relative;
    }
  }
  @layer daisyui.component {
    .card {
      position: relative;
      display: flex;
      flex-direction: column;
      border-radius: var(--radius-box);
      outline-width: 2px;
      transition: outline 0.2s ease-in-out;
      outline: 0 solid #0000;
      outline-offset: 2px;
    }
    .card:focus {
      --tw-outline-style: none;
      outline-style: none;
    }
    @media (forced-colors: active) {
      .card:focus {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
    .card:focus-visible {
      outline-color: currentColor;
    }
    .card :where(figure:first-child) {
      overflow: hidden;
      border-start-start-radius: inherit;
      border-start-end-radius: inherit;
      border-end-start-radius: unset;
      border-end-end-radius: unset;
    }
    .card :where(figure:last-child) {
      overflow: hidden;
      border-start-start-radius: unset;
      border-start-end-radius: unset;
      border-end-start-radius: inherit;
      border-end-end-radius: inherit;
    }
    .card figure {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .card:has(> input:is(input[type="checkbox"], input[type="radio"])) {
      cursor: pointer;
      user-select: none;
    }
    .card:has(> :checked) {
      outline: 2px solid currentColor;
    }
  }
  .absolute {
    position: absolute;
  }
  .relative {
    position: relative;
  }
  .static {
    position: static;
  }
  .sticky {
    position: sticky;
  }
  .inset-0 {
    inset: calc(var(--spacing) * 0);
  }
  @layer daisyui.modifier {
    .toast-end {
      inset-inline-start: auto;
      inset-inline-end: calc(0.25rem * 4);
      --toast-x: 0;
    }
  }
  @layer daisyui.modifier {
    .dropdown-end {
      --anchor-h: span-left;
    }
    .dropdown-end :where(.dropdown-content) {
      inset-inline-end: calc(0.25rem * 0);
      translate: 0 0;
    }
    [dir="rtl"] .dropdown-end :where(.dropdown-content) {
      translate: 0 0;
    }
    .dropdown-end.dropdown-left {
      --anchor-h: left;
      --anchor-v: span-top;
    }
    .dropdown-end.dropdown-left .dropdown-content {
      top: auto;
      bottom: calc(0.25rem * 0);
    }
    .dropdown-end.dropdown-right {
      --anchor-h: right;
      --anchor-v: span-top;
    }
    .dropdown-end.dropdown-right .dropdown-content {
      top: auto;
      bottom: calc(0.25rem * 0);
    }
  }
  @layer daisyui.modifier {
    .toast-top {
      top: calc(0.25rem * 4);
      bottom: auto;
      --toast-y: 0;
    }
  }
  .-top-4 {
    top: calc(var(--spacing) * -4);
  }
  .top-0 {
    top: calc(var(--spacing) * 0);
  }
  .top-1\/4 {
    top: calc(1/4 * 100%);
  }
  .-right-4 {
    right: calc(var(--spacing) * -4);
  }
  .right-0 {
    right: calc(var(--spacing) * 0);
  }
  .right-1\/4 {
    right: calc(1/4 * 100%);
  }
  .-bottom-4 {
    bottom: calc(var(--spacing) * -4);
  }
  .bottom-1\/4 {
    bottom: calc(1/4 * 100%);
  }
  .-left-4 {
    left: calc(var(--spacing) * -4);
  }
  .left-1\/4 {
    left: calc(1/4 * 100%);
  }
  @layer daisyui.component {
    .hero-content {
      isolation: isolate;
      display: flex;
      max-width: 80rem;
      align-items: center;
      justify-content: center;
      gap: calc(0.25rem * 4);
      padding: calc(0.25rem * 4);
    }
  }
  @layer daisyui.component {
    .textarea {
      border: var(--border) solid #0000;
      min-height: calc(0.25rem * 20);
      flex-shrink: 1;
      appearance: none;
      border-radius: var(--radius-field);
      background-color: var(--color-base-100);
      padding-block: calc(0.25rem * 2);
      vertical-align: middle;
      width: clamp(3rem, 20rem, 100%);
      padding-inline-start: 0.75rem;
      padding-inline-end: 0.75rem;
      font-size: max(var(--font-size, 0.875rem), 0.875rem);
      touch-action: manipulation;
      border-color: var(--input-color);
      box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      --input-color: var(--color-base-content);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .textarea {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      }
    }
    @supports (color: color-mix(in lab, red, red)) {
      .textarea {
        --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
    }
    .textarea textarea {
      appearance: none;
      background-color: transparent;
      border: none;
    }
    .textarea textarea:focus, .textarea textarea:focus-within {
      --tw-outline-style: none;
      outline-style: none;
    }
    @media (forced-colors: active) {
      .textarea textarea:focus, .textarea textarea:focus-within {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
    .textarea:focus, .textarea:focus-within {
      --input-color: var(--color-base-content);
      box-shadow: 0 1px var(--input-color);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .textarea:focus, .textarea:focus-within {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
      }
    }
    .textarea:focus, .textarea:focus-within {
      outline: 2px solid var(--input-color);
      outline-offset: 2px;
      isolation: isolate;
    }
    @media (pointer: coarse) {
      @supports (-webkit-touch-callout: none) {
        .textarea:focus, .textarea:focus-within {
          --font-size: 1rem;
        }
      }
    }
    .textarea:has(> textarea[disabled]), .textarea:is(:disabled, [disabled]) {
      cursor: not-allowed;
      border-color: var(--color-base-200);
      background-color: var(--color-base-200);
      color: var(--color-base-content);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .textarea:has(> textarea[disabled]), .textarea:is(:disabled, [disabled]) {
        color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
      }
    }
    .textarea:has(> textarea[disabled])::placeholder, .textarea:is(:disabled, [disabled])::placeholder {
      color: var(--color-base-content);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .textarea:has(> textarea[disabled])::placeholder, .textarea:is(:disabled, [disabled])::placeholder {
        color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
      }
    }
    .textarea:has(> textarea[disabled]), .textarea:is(:disabled, [disabled]) {
      box-shadow: none;
    }
    .textarea:has(> textarea[disabled]) > textarea[disabled] {
      cursor: not-allowed;
    }
  }
  @layer daisyui.component {
    .stack {
      display: inline-grid;
      grid-template-columns: 3px 4px 1fr 4px 3px;
      grid-template-rows: 3px 4px 1fr 4px 3px;
    }
    .stack > * {
      height: 100%;
      width: 100%;
    }
    .stack > *:nth-child(n + 2) {
      width: 100%;
      opacity: 70%;
    }
    .stack > *:nth-child(2) {
      z-index: 2;
      opacity: 90%;
    }
    .stack > *:nth-child(1) {
      z-index: 3;
      width: 100%;
    }
  }
  @layer daisyui.modifier {
    .stack > *, .stack.stack-bottom > * {
      grid-column: 3 / 4;
      grid-row: 3 / 6;
    }
    .stack > *:nth-child(2), .stack.stack-bottom > *:nth-child(2) {
      grid-column: 2 / 5;
      grid-row: 2 / 5;
    }
    .stack > *:nth-child(1), .stack.stack-bottom > *:nth-child(1) {
      grid-column: 1 / 6;
      grid-row: 1 / 4;
    }
    .stack.stack-top > * {
      grid-column: 3 / 4;
      grid-row: 1 / 4;
    }
    .stack.stack-top > *:nth-child(2) {
      grid-column: 2 / 5;
      grid-row: 2 / 5;
    }
    .stack.stack-top > *:nth-child(1) {
      grid-column: 1 / 6;
      grid-row: 3 / 6;
    }
    .stack.stack-start > * {
      grid-column: 1 / 4;
      grid-row: 3 / 4;
    }
    .stack.stack-start > *:nth-child(2) {
      grid-column: 2 / 5;
      grid-row: 2 / 5;
    }
    .stack.stack-start > *:nth-child(1) {
      grid-column: 3 / 6;
      grid-row: 1 / 6;
    }
    .stack.stack-end > * {
      grid-column: 3 / 6;
      grid-row: 3 / 4;
    }
    .stack.stack-end > *:nth-child(2) {
      grid-column: 2 / 5;
      grid-row: 2 / 5;
    }
    .stack.stack-end > *:nth-child(1) {
      grid-column: 1 / 4;
      grid-row: 1 / 6;
    }
  }
  .z-10 {
    z-index: 10;
  }
  .z-50 {
    z-index: 50;
  }
  .z-\[1\] {
    z-index: 1;
  }
  .col-span-3 {
    grid-column: span 3 / span 3;
  }
  .col-span-full {
    grid-column: 1 / -1;
  }
  @layer daisyui.component {
    .hero {
      display: grid;
      width: 100%;
      place-items: center;
      background-size: cover;
      background-position: center;
    }
    .hero > * {
      grid-column-start: 1;
      grid-row-start: 1;
    }
  }
  .container {
    width: 100%;
  }
  @media (width >= 40rem) {
    .container {
      max-width: 40rem;
    }
  }
  @media (width >= 48rem) {
    .container {
      max-width: 48rem;
    }
  }
  @media (width >= 64rem) {
    .container {
      max-width: 64rem;
    }
  }
  @media (width >= 80rem) {
    .container {
      max-width: 80rem;
    }
  }
  @media (width >= 96rem) {
    .container {
      max-width: 96rem;
    }
  }
  .mx-auto {
    margin-inline: auto;
  }
  @layer daisyui.component {
    .label {
      display: inline-flex;
      align-items: center;
      gap: calc(0.25rem * 1.5);
      white-space: nowrap;
      color: currentcolor;
    }
    @supports (color: color-mix(in lab, red, red)) {
      .label {
        color: color-mix(in oklab, currentcolor 60%, transparent);
      }
    }
    .label:has(input) {
      cursor: pointer;
    }
    .label:is(.input > *, .select > *) {
      display: flex;
      height: calc(100% - 0.5rem);
      align-items: center;
      padding-inline: calc(0.25rem * 3);
      white-space: nowrap;
      font-size: inherit;
    }
    .label:is(.input > *, .select > *):first-child {
      margin-inline-start: calc(0.25rem * -3);
      margin-inline-end: calc(0.25rem * 3);
      border-inline-end: var(--border) solid currentColor;
    }
    @supports (color: color-mix(in lab, red, red)) {
      .label:is(.input > *, .select > *):first-child {
        border-inline-end: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
      }
    }
    .label:is(.input > *, .select > *):last-child {
      margin-inline-start: calc(0.25rem * 3);
      margin-inline-end: calc(0.25rem * -3);
      border-inline-start: var(--border) solid currentColor;
    }
    @supports (color: color-mix(in lab, red, red)) {
      .label:is(.input > *, .select > *):last-child {
        border-inline-start: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
      }
    }
  }
  @layer daisyui.modifier {
    .steps-vertical {
      grid-auto-rows: 1fr;
      grid-auto-flow: row;
    }
    .steps-vertical .step {
      display: grid;
      grid-template-columns: repeat(2, minmax(0, 1fr));
      grid-template-columns: 40px 1fr;
      grid-template-rows: repeat(1, minmax(0, 1fr));
      grid-template-rows: auto;
      gap: 0.5rem;
      min-height: 4rem;
      justify-items: start;
    }
    .steps-vertical .step:before {
      height: 100%;
      width: calc(0.25rem * 2);
      translate: -50% -50%;
      margin-inline-start: 50%;
    }
    [dir="rtl"] .steps-vertical .step:before {
      translate: 50% -50%;
    }
  }
  .mt-2 {
    margin-top: calc(var(--spacing) * 2);
  }
  .mt-3 {
    margin-top: calc(var(--spacing) * 3);
  }
  .mt-4 {
    margin-top: calc(var(--spacing) * 4);
  }
  .mt-6 {
    margin-top: calc(var(--spacing) * 6);
  }
  .mt-8 {
    margin-top: calc(var(--spacing) * 8);
  }
  .mt-10 {
    margin-top: calc(var(--spacing) * 10);
  }
  .mt-12 {
    margin-top: calc(var(--spacing) * 12);
  }
  .mr-2 {
    margin-right: calc(var(--spacing) * 2);
  }
  .mb-1 {
    margin-bottom: calc(var(--spacing) * 1);
  }
  .mb-2 {
    margin-bottom: calc(var(--spacing) * 2);
  }
  .mb-4 {
    margin-bottom: calc(var(--spacing) * 4);
  }
  .mb-6 {
    margin-bottom: calc(var(--spacing) * 6);
  }
  .mb-8 {
    margin-bottom: calc(var(--spacing) * 8);
  }
  .mb-12 {
    margin-bottom: calc(var(--spacing) * 12);
  }
  .mb-16 {
    margin-bottom: calc(var(--spacing) * 16);
  }
  @layer daisyui.component {
    .badge {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: calc(0.25rem * 2);
      border-radius: var(--radius-selector);
      vertical-align: middle;
      color: var(--badge-fg);
      border: var(--border) solid var(--badge-color, var(--color-base-200));
      font-size: 0.875rem;
      width: fit-content;
      padding-inline: calc(0.25rem * 3 - var(--border));
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
      background-color: var(--badge-bg);
      --badge-bg: var(--badge-color, var(--color-base-100));
      --badge-fg: var(--color-base-content);
      --size: calc(var(--size-selector, 0.25rem) * 6);
      height: var(--size);
    }
  }
  @layer daisyui.component {
    .footer {
      display: grid;
      width: 100%;
      grid-auto-flow: row;
      place-items: start;
      column-gap: calc(0.25rem * 4);
      row-gap: calc(0.25rem * 10);
      font-size: 0.875rem;
      line-height: 1.25rem;
    }
    .footer > * {
      display: grid;
      place-items: start;
      gap: calc(0.25rem * 2);
    }
    .footer.footer-center {
      grid-auto-flow: column dense;
      place-items: center;
      text-align: center;
    }
    .footer.footer-center > * {
      place-items: center;
    }
  }
  @layer daisyui.component {
    .card-body {
      display: flex;
      flex: auto;
      flex-direction: column;
      gap: calc(0.25rem * 2);
      padding: var(--card-p, 1.5rem);
      font-size: var(--card-fs, 0.875rem);
    }
    .card-body :where(p) {
      flex-grow: 1;
    }
  }
  .alert {
    border-width: var(--border);
    border-color: var(--alert-border-color, var(--color-base-200));
  }
  @layer daisyui.component {
    .alert {
      border-style: solid;
      --alert-border-color: var(--color-base-200);
      display: grid;
      align-items: center;
      gap: calc(0.25rem * 4);
      border-radius: var(--radius-box);
      padding-inline: calc(0.25rem * 4);
      padding-block: calc(0.25rem * 3);
      color: var(--color-base-content);
      background-color: var(--alert-color, var(--color-base-200));
      justify-content: start;
      justify-items: start;
      grid-auto-flow: column;
      grid-template-columns: auto;
      text-align: start;
      font-size: 0.875rem;
      line-height: 1.25rem;
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
      box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px #000, 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * 0.08));
    }
    @supports (color: color-mix(in lab, red, red)) {
      .alert {
        box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px color-mix( in oklab, color-mix(in oklab, #000 20%, var(--alert-color, var(--color-base-200))) calc(var(--depth) * 20%), #0000 ), 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * 0.08));
      }
    }
    .alert:has(:nth-child(2)) {
      grid-template-columns: auto minmax(auto, 1fr);
    }
  }
  @layer daisyui.component {
    .card-actions {
      display: flex;
      flex-wrap: wrap;
      align-items: flex-start;
      gap: calc(0.25rem * 2);
    }
  }
  @layer daisyui.component {
    .card-title {
      display: flex;
      align-items: center;
      gap: calc(0.25rem * 2);
      font-size: var(--cardtitle-fs, 1.125rem);
      font-weight: 600;
    }
  }
  :root .prose {
    --tw-prose-body: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-body: color-mix(in oklab, var(--color-base-content) 80%, #0000);
    }
  }
  :root .prose {
    --tw-prose-headings: var(--color-base-content);
    --tw-prose-lead: var(--color-base-content);
    --tw-prose-links: var(--color-base-content);
    --tw-prose-bold: var(--color-base-content);
    --tw-prose-counters: var(--color-base-content);
    --tw-prose-bullets: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-bullets: color-mix(in oklab, var(--color-base-content) 50%, #0000);
    }
  }
  :root .prose {
    --tw-prose-hr: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-hr: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }
  :root .prose {
    --tw-prose-quotes: var(--color-base-content);
    --tw-prose-quote-borders: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-quote-borders: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }
  :root .prose {
    --tw-prose-captions: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-captions: color-mix(in oklab, var(--color-base-content) 50%, #0000);
    }
  }
  :root .prose {
    --tw-prose-code: var(--color-base-content);
    --tw-prose-pre-code: var(--color-neutral-content);
    --tw-prose-pre-bg: var(--color-neutral);
    --tw-prose-th-borders: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-th-borders: color-mix(in oklab, var(--color-base-content) 50%, #0000);
    }
  }
  :root .prose {
    --tw-prose-td-borders: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-td-borders: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }
  :root .prose {
    --tw-prose-kbd: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-kbd: color-mix(in oklab, var(--color-base-content) 80%, #0000);
    }
  }
  :root .prose :where(code):not(pre > code) {
    background-color: var(--color-base-200);
    border-radius: var(--radius-selector);
    border: var(--border) solid var(--color-base-300);
    padding-inline: 0.5em;
    font-weight: inherit;
  }
  :root .prose :where(code):not(pre > code):before, :root .prose :where(code):not(pre > code):after {
    display: none;
  }
  .block {
    display: block;
  }
  .flex {
    display: flex;
  }
  .grid {
    display: grid;
  }
  .hidden {
    display: none;
  }
  .inline-block {
    display: inline-block;
  }
  @layer daisyui.modifier {
    .btn-circle {
      border-radius: calc(infinity * 1px);
      padding-inline: calc(0.25rem * 0);
      width: var(--size);
      height: var(--size);
    }
  }
  @layer daisyui.modifier {
    .btn-square {
      padding-inline: calc(0.25rem * 0);
      width: var(--size);
      height: var(--size);
    }
  }
  .h-1 {
    height: calc(var(--spacing) * 1);
  }
  .h-4 {
    height: calc(var(--spacing) * 4);
  }
  .h-5 {
    height: calc(var(--spacing) * 5);
  }
  .h-6 {
    height: calc(var(--spacing) * 6);
  }
  .h-10 {
    height: calc(var(--spacing) * 10);
  }
  .h-20 {
    height: calc(var(--spacing) * 20);
  }
  .h-32 {
    height: calc(var(--spacing) * 32);
  }
  .h-56 {
    height: calc(var(--spacing) * 56);
  }
  .h-72 {
    height: calc(var(--spacing) * 72);
  }
  .h-80 {
    height: calc(var(--spacing) * 80);
  }
  .h-96 {
    height: calc(var(--spacing) * 96);
  }
  .h-auto {
    height: auto;
  }
  .h-full {
    height: 100%;
  }
  .h-screen {
    height: 100vh;
  }
  .min-h-screen {
    min-height: 100vh;
  }
  @layer daisyui.modifier {
    .btn-block {
      width: 100%;
    }
  }
  .w-4 {
    width: calc(var(--spacing) * 4);
  }
  .w-5 {
    width: calc(var(--spacing) * 5);
  }
  .w-6 {
    width: calc(var(--spacing) * 6);
  }
  .w-10 {
    width: calc(var(--spacing) * 10);
  }
  .w-20 {
    width: calc(var(--spacing) * 20);
  }
  .w-32 {
    width: calc(var(--spacing) * 32);
  }
  .w-40 {
    width: calc(var(--spacing) * 40);
  }
  .w-52 {
    width: calc(var(--spacing) * 52);
  }
  .w-64 {
    width: calc(var(--spacing) * 64);
  }
  .w-72 {
    width: calc(var(--spacing) * 72);
  }
  .w-80 {
    width: calc(var(--spacing) * 80);
  }
  .w-96 {
    width: calc(var(--spacing) * 96);
  }
  .w-full {
    width: 100%;
  }
  .max-w-2xl {
    max-width: var(--container-2xl);
  }
  .max-w-3xl {
    max-width: var(--container-3xl);
  }
  .max-w-4xl {
    max-width: var(--container-4xl);
  }
  .max-w-6xl {
    max-width: var(--container-6xl);
  }
  .max-w-7xl {
    max-width: var(--container-7xl);
  }
  .max-w-md {
    max-width: var(--container-md);
  }
  .max-w-none {
    max-width: none;
  }
  .flex-1 {
    flex: 1;
  }
  @layer daisyui.modifier {
    .swap-rotate .swap-on, .swap-rotate input:indeterminate ~ .swap-on {
      rotate: 45deg;
    }
    .swap-rotate input:is(:checked, :indeterminate) ~ .swap-on, .swap-rotate.swap-active .swap-on {
      rotate: 0deg;
    }
    .swap-rotate input:is(:checked, :indeterminate) ~ .swap-off, .swap-rotate.swap-active .swap-off {
      rotate: calc(45deg * -1);
    }
  }
  .transform {
    transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
  }
  .animate-bounce {
    animation: var(--animate-bounce);
  }
  .animate-pulse {
    animation: var(--animate-pulse);
  }
  @layer daisyui.component {
    .link {
      cursor: pointer;
      text-decoration-line: underline;
    }
    .link:focus {
      --tw-outline-style: none;
      outline-style: none;
    }
    @media (forced-colors: active) {
      .link:focus {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
    .link:focus-visible {
      outline: 2px solid currentColor;
      outline-offset: 2px;
    }
  }
  .resize-none {
    resize: none;
  }
  .grid-cols-1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }
  .flex-col {
    flex-direction: column;
  }
  .flex-wrap {
    flex-wrap: wrap;
  }
  .items-center {
    align-items: center;
  }
  .items-start {
    align-items: flex-start;
  }
  .justify-between {
    justify-content: space-between;
  }
  .justify-center {
    justify-content: center;
  }
  .justify-end {
    justify-content: flex-end;
  }
  .gap-2 {
    gap: calc(var(--spacing) * 2);
  }
  .gap-3 {
    gap: calc(var(--spacing) * 3);
  }
  .gap-4 {
    gap: calc(var(--spacing) * 4);
  }
  .gap-8 {
    gap: calc(var(--spacing) * 8);
  }
  .gap-12 {
    gap: calc(var(--spacing) * 12);
  }
  :where(.space-y-2 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(var(--spacing) * 2) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-y-reverse)));
  }
  :where(.space-y-4 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(var(--spacing) * 4) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-y-reverse)));
  }
  :where(.space-y-5 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(var(--spacing) * 5) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(var(--spacing) * 5) * calc(1 - var(--tw-space-y-reverse)));
  }
  :where(.space-y-8 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(var(--spacing) * 8) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(var(--spacing) * 8) * calc(1 - var(--tw-space-y-reverse)));
  }
  :where(.space-x-8 > :not(:last-child)) {
    --tw-space-x-reverse: 0;
    margin-inline-start: calc(calc(var(--spacing) * 8) * var(--tw-space-x-reverse));
    margin-inline-end: calc(calc(var(--spacing) * 8) * calc(1 - var(--tw-space-x-reverse)));
  }
  .overflow-hidden {
    overflow: hidden;
  }
  @layer daisyui.modifier {
    .menu-sm :where(li:not(.menu-title) > *:not(ul, details, .menu-title)), .menu-sm :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
      border-radius: var(--radius-field);
      padding-inline: calc(0.25rem * 2.5);
      padding-block: calc(0.25rem * 1);
      font-size: 0.75rem;
    }
    .menu-sm .menu-title {
      padding-inline: calc(0.25rem * 3);
      padding-block: calc(0.25rem * 2);
    }
  }
  .rounded-2xl {
    border-radius: var(--radius-2xl);
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-full {
    border-radius: calc(infinity * 1px);
  }
  .rounded-lg {
    border-radius: var(--radius-lg);
  }
  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }
  .border-4 {
    border-style: var(--tw-border-style);
    border-width: 4px;
  }
  @layer daisyui.modifier {
    .badge-ghost {
      border-color: var(--color-base-200);
      background-color: var(--color-base-200);
      color: var(--color-base-content);
      background-image: none;
    }
  }
  @layer daisyui.modifier {
    .badge-outline {
      color: var(--badge-color);
      --badge-bg: #0000;
      background-image: none;
      border-color: currentColor;
    }
  }
  .border-accent\/10 {
    border-color: var(--color-accent);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .border-accent\/10 {
      border-color: color-mix(in oklab, var(--color-accent) 10%, transparent);
    }
  }
  .border-accent\/20 {
    border-color: var(--color-accent);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .border-accent\/20 {
      border-color: color-mix(in oklab, var(--color-accent) 20%, transparent);
    }
  }
  .border-base-300 {
    border-color: var(--color-base-300);
  }
  .border-primary\/20 {
    border-color: var(--color-primary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .border-primary\/20 {
      border-color: color-mix(in oklab, var(--color-primary) 20%, transparent);
    }
  }
  .border-secondary\/20 {
    border-color: var(--color-secondary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .border-secondary\/20 {
      border-color: color-mix(in oklab, var(--color-secondary) 20%, transparent);
    }
  }
  .bg-accent\/20 {
    background-color: var(--color-accent);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .bg-accent\/20 {
      background-color: color-mix(in oklab, var(--color-accent) 20%, transparent);
    }
  }
  .bg-base-100 {
    background-color: var(--color-base-100);
  }
  .bg-base-200 {
    background-color: var(--color-base-200);
  }
  .bg-base-200\/60 {
    background-color: var(--color-base-200);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .bg-base-200\/60 {
      background-color: color-mix(in oklab, var(--color-base-200) 60%, transparent);
    }
  }
  .bg-gray-50 {
    background-color: var(--color-gray-50);
  }
  .bg-primary {
    background-color: var(--color-primary);
  }
  .bg-primary\/10 {
    background-color: var(--color-primary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .bg-primary\/10 {
      background-color: color-mix(in oklab, var(--color-primary) 10%, transparent);
    }
  }
  .bg-primary\/20 {
    background-color: var(--color-primary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .bg-primary\/20 {
      background-color: color-mix(in oklab, var(--color-primary) 20%, transparent);
    }
  }
  .bg-secondary {
    background-color: var(--color-secondary);
  }
  .bg-secondary\/10 {
    background-color: var(--color-secondary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .bg-secondary\/10 {
      background-color: color-mix(in oklab, var(--color-secondary) 10%, transparent);
    }
  }
  .bg-secondary\/20 {
    background-color: var(--color-secondary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .bg-secondary\/20 {
      background-color: color-mix(in oklab, var(--color-secondary) 20%, transparent);
    }
  }
  .bg-gradient-to-br {
    --tw-gradient-position: to bottom right in oklab;
    background-image: linear-gradient(var(--tw-gradient-stops));
  }
  .bg-gradient-to-r {
    --tw-gradient-position: to right in oklab;
    background-image: linear-gradient(var(--tw-gradient-stops));
  }
  .bg-gradient-to-t {
    --tw-gradient-position: to top in oklab;
    background-image: linear-gradient(var(--tw-gradient-stops));
  }
  .from-accent\/10 {
    --tw-gradient-from: var(--color-accent);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .from-accent\/10 {
      --tw-gradient-from: color-mix(in oklab, var(--color-accent) 10%, transparent);
    }
  }
  .from-accent\/10 {
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .from-base-100 {
    --tw-gradient-from: var(--color-base-100);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .from-blue-400 {
    --tw-gradient-from: var(--color-blue-400);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .from-primary {
    --tw-gradient-from: var(--color-primary);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .from-primary\/10 {
    --tw-gradient-from: var(--color-primary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .from-primary\/10 {
      --tw-gradient-from: color-mix(in oklab, var(--color-primary) 10%, transparent);
    }
  }
  .from-primary\/10 {
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .from-secondary {
    --tw-gradient-from: var(--color-secondary);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .from-secondary\/10 {
    --tw-gradient-from: var(--color-secondary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .from-secondary\/10 {
      --tw-gradient-from: color-mix(in oklab, var(--color-secondary) 10%, transparent);
    }
  }
  .from-secondary\/10 {
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .via-base-200 {
    --tw-gradient-via: var(--color-base-200);
    --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);
    --tw-gradient-stops: var(--tw-gradient-via-stops);
  }
  .via-blue-500 {
    --tw-gradient-via: var(--color-blue-500);
    --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);
    --tw-gradient-stops: var(--tw-gradient-via-stops);
  }
  .via-secondary {
    --tw-gradient-via: var(--color-secondary);
    --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);
    --tw-gradient-stops: var(--tw-gradient-via-stops);
  }
  .to-accent {
    --tw-gradient-to: var(--color-accent);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .to-accent\/5 {
    --tw-gradient-to: var(--color-accent);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .to-accent\/5 {
      --tw-gradient-to: color-mix(in oklab, var(--color-accent) 5%, transparent);
    }
  }
  .to-accent\/5 {
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .to-base-100 {
    --tw-gradient-to: var(--color-base-100);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .to-primary\/5 {
    --tw-gradient-to: var(--color-primary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .to-primary\/5 {
      --tw-gradient-to: color-mix(in oklab, var(--color-primary) 5%, transparent);
    }
  }
  .to-primary\/5 {
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .to-purple-500 {
    --tw-gradient-to: var(--color-purple-500);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .to-secondary {
    --tw-gradient-to: var(--color-secondary);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .to-secondary\/5 {
    --tw-gradient-to: var(--color-secondary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .to-secondary\/5 {
      --tw-gradient-to: color-mix(in oklab, var(--color-secondary) 5%, transparent);
    }
  }
  .to-secondary\/5 {
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .to-transparent {
    --tw-gradient-to: transparent;
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .bg-clip-text {
    background-clip: text;
  }
  .fill-current {
    fill: currentcolor;
  }
  .object-cover {
    object-fit: cover;
  }
  .p-2 {
    padding: calc(var(--spacing) * 2);
  }
  .p-3 {
    padding: calc(var(--spacing) * 3);
  }
  .p-6 {
    padding: calc(var(--spacing) * 6);
  }
  .p-8 {
    padding: calc(var(--spacing) * 8);
  }
  .p-10 {
    padding: calc(var(--spacing) * 10);
  }
  @layer daisyui.modifier {
    .badge-lg {
      --size: calc(var(--size-selector, 0.25rem) * 7);
      font-size: 1rem;
      padding-inline: calc(0.25rem * 3.5 - var(--border));
    }
  }
  @layer daisyui.modifier {
    .badge-sm {
      --size: calc(var(--size-selector, 0.25rem) * 5);
      font-size: 0.75rem;
      padding-inline: calc(0.25rem * 2.5 - var(--border));
    }
  }
  .px-4 {
    padding-inline: calc(var(--spacing) * 4);
  }
  .py-12 {
    padding-block: calc(var(--spacing) * 12);
  }
  .py-16 {
    padding-block: calc(var(--spacing) * 16);
  }
  .py-20 {
    padding-block: calc(var(--spacing) * 20);
  }
  .text-center {
    text-align: center;
  }
  .font-serif {
    font-family: var(--font-serif);
  }
  .text-2xl {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
  }
  .text-3xl {
    font-size: var(--text-3xl);
    line-height: var(--tw-leading, var(--text-3xl--line-height));
  }
  .text-4xl {
    font-size: var(--text-4xl);
    line-height: var(--tw-leading, var(--text-4xl--line-height));
  }
  .text-5xl {
    font-size: var(--text-5xl);
    line-height: var(--tw-leading, var(--text-5xl--line-height));
  }
  .text-6xl {
    font-size: var(--text-6xl);
    line-height: var(--tw-leading, var(--text-6xl--line-height));
  }
  .text-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }
  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .text-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }
  .text-xs {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }
  .leading-normal {
    --tw-leading: var(--leading-normal);
    line-height: var(--leading-normal);
  }
  .leading-relaxed {
    --tw-leading: var(--leading-relaxed);
    line-height: var(--leading-relaxed);
  }
  .font-black {
    --tw-font-weight: var(--font-weight-black);
    font-weight: var(--font-weight-black);
  }
  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }
  .font-extrabold {
    --tw-font-weight: var(--font-weight-extrabold);
    font-weight: var(--font-weight-extrabold);
  }
  .font-medium {
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
  }
  .font-semibold {
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
  }
  .tracking-normal {
    --tw-tracking: var(--tracking-normal);
    letter-spacing: var(--tracking-normal);
  }
  .tracking-wide {
    --tw-tracking: var(--tracking-wide);
    letter-spacing: var(--tracking-wide);
  }
  @layer daisyui.modifier {
    .alert-info {
      color: var(--color-info-content);
      --alert-border-color: var(--color-info);
      --alert-color: var(--color-info);
    }
  }
  @layer daisyui.modifier {
    .link-primary {
      color: var(--color-primary);
    }
    @media (hover: hover) {
      .link-primary:hover {
        color: var(--color-primary);
      }
      @supports (color: color-mix(in lab, red, red)) {
        .link-primary:hover {
          color: color-mix(in oklab, var(--color-primary) 80%, #000);
        }
      }
    }
  }
  .text-accent {
    color: var(--color-accent);
  }
  .text-base-content {
    color: var(--color-base-content);
  }
  .text-base-content\/30 {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .text-base-content\/30 {
      color: color-mix(in oklab, var(--color-base-content) 30%, transparent);
    }
  }
  .text-base-content\/60 {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .text-base-content\/60 {
      color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
    }
  }
  .text-base-content\/70 {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .text-base-content\/70 {
      color: color-mix(in oklab, var(--color-base-content) 70%, transparent);
    }
  }
  .text-base-content\/80 {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .text-base-content\/80 {
      color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
    }
  }
  .text-base-content\/90 {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .text-base-content\/90 {
      color: color-mix(in oklab, var(--color-base-content) 90%, transparent);
    }
  }
  .text-black {
    color: var(--color-black);
  }
  .text-gray-400 {
    color: var(--color-gray-400);
  }
  .text-gray-500 {
    color: var(--color-gray-500);
  }
  .text-gray-600 {
    color: var(--color-gray-600);
  }
  .text-primary {
    color: var(--color-primary);
  }
  .text-primary-content {
    color: var(--color-primary-content);
  }
  .text-secondary {
    color: var(--color-secondary);
  }
  .text-secondary-content {
    color: var(--color-secondary-content);
  }
  .text-transparent {
    color: transparent;
  }
  .underline {
    text-decoration-line: underline;
  }
  .opacity-60 {
    opacity: 60%;
  }
  .shadow {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-2xl {
    --tw-shadow: 0 25px 50px -12px var(--tw-shadow-color, rgb(0 0 0 / 0.25));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-lg {
    --tw-shadow: 0 10px 15px -3px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 4px 6px -4px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-xl {
    --tw-shadow: 0 20px 25px -5px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 8px 10px -6px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .ring {
    --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .ring-primary {
    --tw-ring-color: var(--color-primary);
  }
  .ring-offset-2 {
    --tw-ring-offset-width: 2px;
    --tw-ring-offset-shadow: var(--tw-ring-inset,) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  }
  .ring-offset-8 {
    --tw-ring-offset-width: 8px;
    --tw-ring-offset-shadow: var(--tw-ring-inset,) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  }
  .ring-offset-base-100 {
    --tw-ring-offset-color: var(--color-base-100);
  }
  @layer daisyui.modifier {
    .btn-ghost:not(.btn-active, :hover, :active:focus, :focus-visible) {
      --btn-shadow: "";
      --btn-bg: #0000;
      --btn-border: #0000;
      --btn-noise: none;
    }
    .btn-ghost:not(.btn-active, :hover, :active:focus, :focus-visible):not(:disabled, [disabled], .btn-disabled) {
      outline-color: currentcolor;
      --btn-fg: currentColor;
    }
    @media (hover: none) {
      .btn-ghost:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled) {
        --btn-shadow: "";
        --btn-bg: #0000;
        --btn-border: #0000;
        --btn-noise: none;
        --btn-fg: currentColor;
      }
    }
  }
  .blur-3xl {
    --tw-blur: blur(var(--blur-3xl));
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .backdrop-blur-xl {
    --tw-backdrop-blur: blur(var(--blur-xl));
    -webkit-backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
    backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
  }
  .backdrop-filter {
    -webkit-backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
    backdrop-filter: var(--tw-backdrop-blur,) var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,) var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,) var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,) var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
  }
  .transition {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter, display, content-visibility, overlay, pointer-events;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-all {
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-transform {
    transition-property: transform, translate, scale, rotate;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .delay-100 {
    transition-delay: 100ms;
  }
  .delay-200 {
    transition-delay: 200ms;
  }
  .delay-300 {
    transition-delay: 300ms;
  }
  .duration-300 {
    --tw-duration: 300ms;
    transition-duration: 300ms;
  }
  .duration-500 {
    --tw-duration: 500ms;
    transition-duration: 500ms;
  }
  .ease-in-out {
    --tw-ease: var(--ease-in-out);
    transition-timing-function: var(--ease-in-out);
  }
  @layer daisyui.modifier {
    .btn-outline:not( .btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled, :checked ) {
      --btn-shadow: "";
      --btn-bg: #0000;
      --btn-fg: var(--btn-color);
      --btn-border: var(--btn-color);
      --btn-noise: none;
    }
    @media (hover: none) {
      .btn-outline:hover:not( .btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled, :checked ) {
        --btn-shadow: "";
        --btn-bg: #0000;
        --btn-fg: var(--btn-color);
        --btn-border: var(--btn-color);
        --btn-noise: none;
      }
    }
  }
  @layer daisyui.modifier {
    .btn-lg {
      --fontsize: 1.125rem;
      --btn-p: 1.25rem;
      --size: calc(var(--size-field, 0.25rem) * 12);
    }
  }
  @layer daisyui.modifier {
    .btn-sm {
      --fontsize: 0.75rem;
      --btn-p: 0.75rem;
      --size: calc(var(--size-field, 0.25rem) * 8);
    }
  }
  @layer daisyui.modifier {
    .badge-accent {
      --badge-color: var(--color-accent);
      --badge-fg: var(--color-accent-content);
    }
  }
  @layer daisyui.modifier {
    .badge-primary {
      --badge-color: var(--color-primary);
      --badge-fg: var(--color-primary-content);
    }
  }
  @layer daisyui.modifier {
    .badge-secondary {
      --badge-color: var(--color-secondary);
      --badge-fg: var(--color-secondary-content);
    }
  }
  @layer daisyui.modifier.color {
    .btn-primary {
      --btn-color: var(--color-primary);
      --btn-fg: var(--color-primary-content);
    }
  }
  @layer daisyui.modifier.color {
    .btn-secondary {
      --btn-color: var(--color-secondary);
      --btn-fg: var(--color-secondary-content);
    }
  }
  @media (hover: hover) {
    .group-hover\:translate-x-1:is(:where(.group):hover *) {
      --tw-translate-x: calc(var(--spacing) * 1);
      translate: var(--tw-translate-x) var(--tw-translate-y);
    }
  }
  @media (hover: hover) {
    .group-hover\:scale-110:is(:where(.group):hover *) {
      --tw-scale-x: 110%;
      --tw-scale-y: 110%;
      --tw-scale-z: 110%;
      scale: var(--tw-scale-x) var(--tw-scale-y);
    }
  }
  @media (hover: hover) {
    .group-hover\:rotate-12:is(:where(.group):hover *) {
      rotate: 12deg;
    }
  }
  @media (hover: hover) {
    .hover\:-translate-y-2:hover {
      --tw-translate-y: calc(var(--spacing) * -2);
      translate: var(--tw-translate-x) var(--tw-translate-y);
    }
  }
  @media (hover: hover) {
    .hover\:scale-105:hover {
      --tw-scale-x: 105%;
      --tw-scale-y: 105%;
      --tw-scale-z: 105%;
      scale: var(--tw-scale-x) var(--tw-scale-y);
    }
  }
  @media (hover: hover) {
    .hover\:scale-110:hover {
      --tw-scale-x: 110%;
      --tw-scale-y: 110%;
      --tw-scale-z: 110%;
      scale: var(--tw-scale-x) var(--tw-scale-y);
    }
  }
  @media (hover: hover) {
    .hover\:scale-\[1\.01\]:hover {
      scale: 1.01;
    }
  }
  @media (hover: hover) {
    .hover\:text-primary:hover {
      color: var(--color-primary);
    }
  }
  @media (hover: hover) {
    .hover\:shadow-2xl:hover {
      --tw-shadow: 0 25px 50px -12px var(--tw-shadow-color, rgb(0 0 0 / 0.25));
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    }
  }
  @media (hover: hover) {
    .hover\:shadow-blue-500\/30:hover {
      --tw-shadow-color: color-mix(in srgb, oklch(62.3% 0.214 259.815) 30%, transparent);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .hover\:shadow-blue-500\/30:hover {
        --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-blue-500) 30%, transparent) var(--tw-shadow-alpha), transparent);
      }
    }
  }
  @media (hover: hover) {
    .hover\:ring-secondary:hover {
      --tw-ring-color: var(--color-secondary);
    }
  }
  @layer daisyui.modifier {
    .focus\:input-primary:focus, .focus\:input-primary:focus:focus, .focus\:input-primary:focus:focus-within {
      --input-color: var(--color-primary);
    }
  }
  @layer daisyui.modifier {
    .focus\:textarea-primary:focus, .focus\:textarea-primary:focus:focus, .focus\:textarea-primary:focus:focus-within {
      --input-color: var(--color-primary);
    }
  }
  @media (width >= 40rem) {
    .sm\:flex-row {
      flex-direction: row;
    }
  }
  @media (width >= 48rem) {
    .md\:h-\[500px\] {
      height: 500px;
    }
  }
  @media (width >= 48rem) {
    .md\:w-72 {
      width: calc(var(--spacing) * 72);
    }
  }
  @media (width >= 48rem) {
    .md\:grid-cols-2 {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
  @media (width >= 48rem) {
    .md\:grid-cols-3 {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }
  @media (width >= 48rem) {
    .md\:justify-start {
      justify-content: flex-start;
    }
  }
  @media (width >= 48rem) {
    .md\:p-12 {
      padding: calc(var(--spacing) * 12);
    }
  }
  @media (width >= 48rem) {
    .md\:px-0 {
      padding-inline: calc(var(--spacing) * 0);
    }
  }
  @media (width >= 48rem) {
    .md\:px-8 {
      padding-inline: calc(var(--spacing) * 8);
    }
  }
  @media (width >= 48rem) {
    .md\:text-3xl {
      font-size: var(--text-3xl);
      line-height: var(--tw-leading, var(--text-3xl--line-height));
    }
  }
  @media (width >= 48rem) {
    .md\:text-5xl {
      font-size: var(--text-5xl);
      line-height: var(--tw-leading, var(--text-5xl--line-height));
    }
  }
  @media (width >= 48rem) {
    .md\:text-6xl {
      font-size: var(--text-6xl);
      line-height: var(--tw-leading, var(--text-6xl--line-height));
    }
  }
  @media (width >= 48rem) {
    .md\:text-7xl {
      font-size: var(--text-7xl);
      line-height: var(--tw-leading, var(--text-7xl--line-height));
    }
  }
  @media (width >= 48rem) {
    .md\:text-xl {
      font-size: var(--text-xl);
      line-height: var(--tw-leading, var(--text-xl--line-height));
    }
  }
  @media (width >= 64rem) {
    .lg\:mx-0 {
      margin-inline: calc(var(--spacing) * 0);
    }
  }
  @media (width >= 64rem) {
    @layer daisyui.modifier {
      .lg\:steps-horizontal {
        grid-auto-columns: 1fr;
        display: inline-grid;
        grid-auto-flow: column;
        overflow: hidden;
        overflow-x: auto;
      }
      .lg\:steps-horizontal .step {
        display: grid;
        grid-template-columns: repeat(1, minmax(0, 1fr));
        grid-template-columns: auto;
        grid-template-rows: repeat(2, minmax(0, 1fr));
        grid-template-rows: 40px 1fr;
        place-items: center;
        text-align: center;
        min-width: 4rem;
      }
      .lg\:steps-horizontal .step:before {
        height: calc(0.25rem * 2);
        width: 100%;
        translate: 0;
        margin-inline-start: -100%;
      }
      [dir="rtl"] .lg\:steps-horizontal .step:before {
        translate: 0;
      }
    }
  }
  @media (width >= 64rem) {
    .lg\:flex {
      display: flex;
    }
  }
  @media (width >= 64rem) {
    .lg\:hidden {
      display: none;
    }
  }
  @media (width >= 64rem) {
    .lg\:grid-cols-2 {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
  @media (width >= 64rem) {
    .lg\:grid-cols-3 {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }
  @media (width >= 64rem) {
    .lg\:flex-row {
      flex-direction: row;
    }
  }
  @media (width >= 64rem) {
    .lg\:justify-start {
      justify-content: flex-start;
    }
  }
  @media (width >= 64rem) {
    .lg\:px-16 {
      padding-inline: calc(var(--spacing) * 16);
    }
  }
  @media (width >= 64rem) {
    .lg\:text-left {
      text-align: left;
    }
  }
  @media (width >= 64rem) {
    .lg\:text-8xl {
      font-size: var(--text-8xl);
      line-height: var(--tw-leading, var(--text-8xl--line-height));
    }
  }
  @media (width >= 64rem) {
    @layer daisyui.modifier {
      .lg\:btn-md {
        --fontsize: 0.875rem;
        --btn-p: 1rem;
        --size: calc(var(--size-field, 0.25rem) * 10);
      }
    }
  }
}
@layer base {
  :where(:root),:root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  @media (prefers-color-scheme: dark) {
    :root:not([data-theme]) {
      color-scheme: dark;
      --color-base-100: oklch(25.33% 0.016 252.42);
      --color-base-200: oklch(23.26% 0.014 253.1);
      --color-base-300: oklch(21.15% 0.012 254.09);
      --color-base-content: oklch(97.807% 0.029 256.847);
      --color-primary: oklch(58% 0.233 277.117);
      --color-primary-content: oklch(96% 0.018 272.314);
      --color-secondary: oklch(65% 0.241 354.308);
      --color-secondary-content: oklch(94% 0.028 342.258);
      --color-accent: oklch(77% 0.152 181.912);
      --color-accent-content: oklch(38% 0.063 188.416);
      --color-neutral: oklch(14% 0.005 285.823);
      --color-neutral-content: oklch(92% 0.004 286.32);
      --color-info: oklch(74% 0.16 232.661);
      --color-info-content: oklch(29% 0.066 243.157);
      --color-success: oklch(76% 0.177 163.223);
      --color-success-content: oklch(37% 0.077 168.94);
      --color-warning: oklch(82% 0.189 84.429);
      --color-warning-content: oklch(41% 0.112 45.904);
      --color-error: oklch(71% 0.194 13.428);
      --color-error-content: oklch(27% 0.105 12.094);
      --radius-selector: 0.5rem;
      --radius-field: 0.25rem;
      --radius-box: 0.5rem;
      --size-selector: 0.25rem;
      --size-field: 0.25rem;
      --border: 1px;
      --depth: 1;
      --noise: 0;
    }
  }
}
@layer base {
  :root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=dark]:checked),[data-theme=dark] {
    color-scheme: dark;
    --color-base-100: oklch(25.33% 0.016 252.42);
    --color-base-200: oklch(23.26% 0.014 253.1);
    --color-base-300: oklch(21.15% 0.012 254.09);
    --color-base-content: oklch(97.807% 0.029 256.847);
    --color-primary: oklch(58% 0.233 277.117);
    --color-primary-content: oklch(96% 0.018 272.314);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='200' height='200' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }
}
@layer base {
  :root {
    scrollbar-color: currentColor #0000;
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root {
      scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
    }
  }
}
@layer base {
  @property --radialprogress {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
}
@layer base {
  :root:has(.modal-open, .modal[open], .modal:target, .modal-toggle:checked) {
    overflow: hidden;
    --page-has-backdrop: 1;
  }
  :root:has(.drawer:not([class*="drawer-open"]) > .drawer-toggle:checked) {
    overflow: hidden;
    --page-has-backdrop: 1;
  }
  @media (width < 40rem) {
    :root:has(.sm\:drawer-open > .drawer-toggle:checked) {
      overflow: hidden;
    }
  }
  @media (width < 40rem) {
    :root:has(.sm\:drawer-open > .drawer-toggle:checked) {
      --page-has-backdrop: 1;
    }
  }
  @media (width < 48rem) {
    :root:has(.md\:drawer-open > .drawer-toggle:checked) {
      overflow: hidden;
    }
  }
  @media (width < 48rem) {
    :root:has(.md\:drawer-open > .drawer-toggle:checked) {
      --page-has-backdrop: 1;
    }
  }
  @media (width < 64rem) {
    :root:has(.lg\:drawer-open > .drawer-toggle:checked) {
      overflow: hidden;
    }
  }
  @media (width < 64rem) {
    :root:has(.lg\:drawer-open > .drawer-toggle:checked) {
      --page-has-backdrop: 1;
    }
  }
  @media (width < 80rem) {
    :root:has(.xl\:drawer-open > .drawer-toggle:checked) {
      overflow: hidden;
    }
  }
  @media (width < 80rem) {
    :root:has(.xl\:drawer-open > .drawer-toggle:checked) {
      --page-has-backdrop: 1;
    }
  }
  @media (width < 96rem) {
    :root:has(.\32xl\:drawer-open > .drawer-toggle:checked) {
      overflow: hidden;
    }
  }
  @media (width < 96rem) {
    :root:has(.\32xl\:drawer-open > .drawer-toggle:checked) {
      --page-has-backdrop: 1;
    }
  }
  @media (width >= 40rem) {
    :root:has(.max-sm\:drawer-open > .drawer-toggle:checked) {
      overflow: hidden;
    }
  }
  @media (width >= 40rem) {
    :root:has(.max-sm\:drawer-open > .drawer-toggle:checked) {
      --page-has-backdrop: 1;
    }
  }
  @media (width >= 48rem) {
    :root:has(.max-md\:drawer-open > .drawer-toggle:checked) {
      overflow: hidden;
    }
  }
  @media (width >= 48rem) {
    :root:has(.max-md\:drawer-open > .drawer-toggle:checked) {
      --page-has-backdrop: 1;
    }
  }
  @media (width >= 64rem) {
    :root:has(.max-lg\:drawer-open > .drawer-toggle:checked) {
      overflow: hidden;
    }
  }
  @media (width >= 64rem) {
    :root:has(.max-lg\:drawer-open > .drawer-toggle:checked) {
      --page-has-backdrop: 1;
    }
  }
  @media (width >= 80rem) {
    :root:has(.max-xl\:drawer-open > .drawer-toggle:checked) {
      overflow: hidden;
    }
  }
  @media (width >= 80rem) {
    :root:has(.max-xl\:drawer-open > .drawer-toggle:checked) {
      --page-has-backdrop: 1;
    }
  }
  @media (width >= 96rem) {
    :root:has(.max-2xl\:drawer-open > .drawer-toggle:checked) {
      overflow: hidden;
    }
  }
  @media (width >= 96rem) {
    :root:has(.max-2xl\:drawer-open > .drawer-toggle:checked) {
      --page-has-backdrop: 1;
    }
  }
}
@layer base {
  :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked ) {
    background-image: linear-gradient(var(--root-bg), var(--root-bg));
    background-color: var(--root-bg);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked ) {
      background-color: color-mix( in srgb, var(--root-bg), oklch(0% 0 0) calc(var(--page-has-backdrop, 0) * 40%) );
    }
  }
  :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked ) {
    animation: set-page-has-scroll forwards;
    animation-timeline: scroll();
    scrollbar-gutter: stable;
    scrollbar-gutter: if(style(--page-has-scroll: 1): stable; else: unset);
  }
  @keyframes set-page-has-scroll {
    0%, to {
      --page-has-scroll: 1;
    }
  }
}
@layer base {
  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
  :where(:root, [data-theme]) {
    --root-bg: var(--color-base-100);
  }
}
@keyframes rating {
  0%, 40% {
    scale: 1.1;
    filter: brightness(1.05) contrast(1.05);
  }
}
@keyframes dropdown {
  0% {
    opacity: 0;
  }
}
@keyframes radio {
  0% {
    padding: 5px;
  }
  50% {
    padding: 3px;
  }
}
@keyframes toast {
  0% {
    scale: 0.9;
    opacity: 0;
  }
  100% {
    scale: 1;
    opacity: 1;
  }
}
@keyframes skeleton {
  0% {
    background-position: 150%;
  }
  100% {
    background-position: -50%;
  }
}
@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
}
@property --tw-space-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-space-x-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-gradient-position {
  syntax: "*";
  inherits: false;
}
@property --tw-gradient-from {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}
@property --tw-gradient-via {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}
@property --tw-gradient-to {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}
@property --tw-gradient-stops {
  syntax: "*";
  inherits: false;
}
@property --tw-gradient-via-stops {
  syntax: "*";
  inherits: false;
}
@property --tw-gradient-from-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 0%;
}
@property --tw-gradient-via-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 50%;
}
@property --tw-gradient-to-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-leading {
  syntax: "*";
  inherits: false;
}
@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}
@property --tw-tracking {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-backdrop-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-duration {
  syntax: "*";
  inherits: false;
}
@property --tw-ease {
  syntax: "*";
  inherits: false;
}
@property --tw-translate-x {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-y {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-z {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-scale-x {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}
@property --tw-scale-y {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}
@property --tw-scale-z {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}
@keyframes pulse {
  50% {
    opacity: 0.5;
  }
}
@keyframes bounce {
  0%, 100% {
    transform: translateY(-25%);
    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
  }
  50% {
    transform: none;
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}
@layer properties {
  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
    *, ::before, ::after, ::backdrop {
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-space-y-reverse: 0;
      --tw-space-x-reverse: 0;
      --tw-border-style: solid;
      --tw-gradient-position: initial;
      --tw-gradient-from: #0000;
      --tw-gradient-via: #0000;
      --tw-gradient-to: #0000;
      --tw-gradient-stops: initial;
      --tw-gradient-via-stops: initial;
      --tw-gradient-from-position: 0%;
      --tw-gradient-via-position: 50%;
      --tw-gradient-to-position: 100%;
      --tw-leading: initial;
      --tw-font-weight: initial;
      --tw-tracking: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
      --tw-backdrop-blur: initial;
      --tw-backdrop-brightness: initial;
      --tw-backdrop-contrast: initial;
      --tw-backdrop-grayscale: initial;
      --tw-backdrop-hue-rotate: initial;
      --tw-backdrop-invert: initial;
      --tw-backdrop-opacity: initial;
      --tw-backdrop-saturate: initial;
      --tw-backdrop-sepia: initial;
      --tw-duration: initial;
      --tw-ease: initial;
      --tw-translate-x: 0;
      --tw-translate-y: 0;
      --tw-translate-z: 0;
      --tw-scale-x: 1;
      --tw-scale-y: 1;
      --tw-scale-z: 1;
    }
  }
}
